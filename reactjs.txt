Introduced 3yrs ago

React is a UI framework that takes care of updating the UI in response to the changes state or novelty data 
build big, fast Web apps with JavaScript.

declarative JQuery
React does not support any browser below IE8

"When your component is first initialized, the render method is called, generating a lightweight representation of your view. From that representation, a string of markup is produced, and injected into the document. When your data changes, the render method is called again. In order to perform updates as efficiently as possible, we diff the return value from the previous call to render with the new one, and generate a minimal set of changes to be applied to the DOM."

A virtual DOM description is produced. Allows a "DOM" representation to be created and thrown away each time the component is rendered. Diffs the previous representation and update the mutable DOM with the changes.
60 frames per second.(Request animation framwe)

Components not Templates

Re-rendering not mutating

State vs Properties

State and properties are passed into component for data rendering and logic

Only State is mutated, typically means top level stateful components pass down state as props to components lower in heirarchy 


Data binding iw uni-directional and event delegation is used
Like a game engine pipeline - batch updates
Mix of declarative and Javascript 

Not MVC

strongly enforcing UI and workflow patterns

Redux manages complex state heirarchy

const HelloWorld = (props) => <h2>{props.text}</h2>;

const App = () =>
<section>
  <HelloWorld title="Hello World!" />
  <HelloWorld title="I am in you!" />
</section>

ReactDOM.render(
  <App/>,
  document.getElementById("app")
);

"The Rule of Least Power"

https://www.w3.org/2001/tag/doc/leastPower.html

JSX is a preprocessor step that adds XML syntax to JavaScript.

es2016 + JSX -> babel -> requirejs -> javascript

Scala XML literals mistake? Scala has more power with DSL (code completion/ compiler)  

http://www.lihaoyi.com/scalatags/ 

 section(
    h1("Hello World!")
    h1("I am in you!") 
    a(attr("href"):="www.google.com")("Click here to google")
  )

vs

<section>
    <h1>"Hello World!<h1>
    <h1>I am in you!</h1> 
    <a href="www.google.com">"Click here to google"</a>
</section>

Alternatives - Mithril, Vue, cycle.js.org

Towards an architecture that declaratively describes the application.

Opposite of spagetti PHP server-side development on the client.

sbt-js-engine also enhances sbt-web with npm functionality. If a package.json file is found in the project's base directory then it will cause npm to run.

Applications(All Integrated) vs Documents(Styles cascaded into content)

Single Page Application AKA Memory Leak

Avoid CSS naming collisions. Unique style -> New Component

var MediaAttribute = React.createClass({
	render: function() {
  <div className="action">
  	{this.props.children}
    <img className="img" src="/star.png" width={16} height={16} />
  </div>
  }
})

var MediaObject = React.createClass({
  render: function() {
    return <div className="media">
     <a href={this.props.link} className="img">
     <img src={this.props.image} />  
     </a>
  }
});

ReactDOM.render(
  <MediaObject link="www.example.com" link="example.png">
       <MediaAttribute>Here is a thing</MediaAttribute>
   </MediaObject>,
  document.getElementById('container')
);


Development: Component -> inline CSS (1 to 1 mapping). CSS file is actually generated for DRY. Name mangling.

Rails -> TurboLinks
Partial Page Replacement 
 Instead of letting the browser recompile the JavaScript and CSS between each page change, it keeps the current page instance alive and replaces only the body (or parts of) and the title in the head

ReactJS bugs can be very dependent on browser version - relies on polyfills/spackle to work in all browsers
Taking on ReactJs is understanding in reality there is only one version of ReactJS; the lastest version. (you are part of a continuum it moving so fast).

Create an sbt task to run/watch bundler 

Module bundling

browserify
rollup - treeshaking
webpack - hot module loading


You can even eliminate unused library code with tree-shaking.


http://redux.js.org/ - Flux architecture 

React Router - SPA 


Javascript + JSX 
var root = document.getElementById('root');
var element = <h1>Hello, world!</h1>;
ReactDOM.render(element, root);

ES6 + JSX
const component = <h1>Hello, world!</h1>;
const root = document.getElementById('root');
ReactDOM.render(component, root);

Plain Old Javascript
'use strict';
var element = React.createElement('h1', null, 'Hello, world!');
var root = document.getElementById('root');
ReactDOM.render(element, root);
